generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// Product listings uploaded by vendors, optionally grouped by category.
model products {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  vendor_id   String?  @db.Uuid
  category_id String?  @db.Uuid
  name        String?
  price       Decimal? @db.Decimal
  image_url   String?
  stock       Int?     @db.SmallInt

  vendors  vendors?    @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  category categories? @relation(fields: [category_id], references: [id], onDelete: SetNull)
}

/// Vendor profile for WhatsApp-based shops.
model vendors {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  phone_number  String   @unique
  business_name String
  bot_name      String?
  onboarded     Boolean?

  products   products[]
  categories categories[]
}

/// Categories under which vendors can group their products.
model categories {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  name      String
  vendor_id String @db.Uuid

  vendor   vendors    @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  products products[]
}
